" vim: foldlevel=0 foldenable
"
"
" Install vim-plug:
" $ curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim


" Options: {{{1
" ==============================================================================


" Start with vim defaults
if !has('nvim') && filereadable(expand("$VIMRUNTIME/defaults.vim"))
    unlet! skip_defaults_vim
    source $VIMRUNTIME/defaults.vim
endif


let mapleader=','
let maplocalleader='\'


" elements of interface
set number
set scrolloff=0
set lazyredraw
set laststatus=2
set showtabline=2

set hlsearch
set shortmess-=S
set list listchars=tab:››,trail:·,nbsp:·,extends:→,precedes:←
set cpoptions+=n showbreak=→\ 

set wildmode=list:longest,full

set mouse=a
if !has('nvim')
    set ttymouse=xterm2  | " enable resizing windows with the mouse
endif

if exists('+termguicolors')
  " truecolor under tmux
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif


" sane editing
set expandtab tabstop=4 softtabstop=4 shiftwidth=0 | " <TAB> is 4 spaces, once for all!
set ignorecase smartcase tagcase=smart
set nofoldenable foldlevel=1
if !exists('g:loaded_vimrc')
    set foldmethod=indent
endif
let g:markdown_folding = 1 | " enable folded headings in markdown files


" other options
set hidden
set grepprg=grep\ -nI\ --exclude-dir=.git\ --exclude-dir=venv\ --exclude-dir=__pycache__\ --exclude-dir='*.egg-info'\ --exclude-dir=.vagrant\ $*\ /dev/null
set directory=~/tmp//
set tags+=.git/tags | " The filename doesn't start with './'. See `:h 'tags'` for details.
set modeline


" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Some plugins need termguicolors beforehand
set termguicolors










" Mappings: {{{1
" ==============================================================================

" General mappings
nnoremap <leader>0 :echo 'hi<' . synIDattr(synID(line('.'),col('.'),1),'name') . '> trans<'
    \ . synIDattr(synID(line('.'),col('.'),0),'name') . '> lo<'
    \ . synIDattr(synIDtrans(synID(line('.'),col('.'),1)),'name') . '>'<CR>
    \|" Show highlight group of word under cursor

nnoremap <leader>T :!ctags -R --exclude=.git --exclude=__pycache__ --exclude=.pytest_cache --exclude=swagger-ui --languages=-json --tag-relative=yes -f ./.git/tags . &<CR>|" build tags for the project

" Show/hide helpers
nnoremap <leader>' :NERDTreeToggle<CR>
nnoremap <leader>1 :NERDTreeVCS<CR>
nnoremap <leader>! :NERDTreeFind<CR>
nnoremap <leader>2 :GFiles<CR>
nnoremap <leader>3 :Buffers<CR>
nnoremap <leader>4 :TagbarOpen j<CR>
nnoremap <leader>$ :TagbarToggle<CR>
nnoremap <expr> <leader>q empty(filter(getwininfo(), 'v:val.quickfix')) ? ':copen<CR>' : ':cclose<CR>'|" Show/hide quickfix window
nnoremap <expr> <leader>l empty(filter(getwininfo(), 'v:val.loclist')) ? ':lopen<CR>' : ':lclose<CR>'|" Show/hide location list
nnoremap <BS> :nohlsearch<CR>
nnoremap <leader>( :RainbowToggle<CR>|" Colorize parentheses, brackets, etc.
nnoremap <leader>) :QuickScopeToggle<CR>|" Show/hide quick scope
nnoremap <leader>* :set hlsearch<bar>:let @/=expand('<cword>').'\c'<CR>|" Highlight word under cursor without moving it
nnoremap <leader><leader> :setlocal cursorline!<CR>

" editing
inoremap KJ <C-Bslash><C-N>|" back to normal mode
nnoremap <leader>d :call Ban_DuplicateLine("normal")<CR>
vnoremap <leader>d :<C-U>call Ban_DuplicateLine("visual")<CR>

nnoremap <leader>D :call Ban_DuplicateAndCommentLine("normal")<CR>
vnoremap <leader>D :<C-U>call Ban_DuplicateAndCommentLine("visual")<CR>

vnoremap gC :call Ban_InvertCommentOnRangeOfLines("visual")<CR>
nnoremap gC :set operatorfunc=Ban_InvertCommentOnRangeOfLines<CR>g@
nnoremap gCC :call Ban_InvertCommentOnRangeOfLines("normal")<CR>

nnoremap <leader><Space> :call Ban_IsolateLineWithSpacesAround("normal")<CR>
vnoremap <leader><Space> :call Ban_IsolateLineWithSpacesAround("visual")<CR>

nnoremap <C-j> :call Ban_MoveLine("normal", "down")<CR>
vnoremap <C-j> :<C-U>call Ban_MoveLine("visual", "down")<CR>
nnoremap <C-k> :call Ban_MoveLine("normal", "up")<CR>
vnoremap <C-k> :<C-U>call Ban_MoveLine("visual", "up")<CR>

" file and buffer
nnoremap <leader>w :update<CR>
nnoremap <silent> <leader>= :update<CR>:let _state=winsaveview()<CR>gg=G:call winrestview(_state)<CR>:unlet _state<CR>|" Format all the source code and move back to original position
nnoremap <silent> <leader>m :update<CR>:make %<CR>

" windows and tabs
nnoremap <C-w>to :tab split<CR>|" open current buffer in new tab page
nnoremap <C-w>tc :tabclose<CR>

" navigation
nnoremap <Space> <C-F>

nnoremap ]a :next<CR>
nnoremap [a :previous<CR>

nnoremap ]q :cnext<CR>|" go to next line in quickfix
nnoremap [q :cprevious<CR>|" go to previous line in quickfix
nnoremap ]Q :cnfile<CR>|" go to next file in quickfix
nnoremap [Q :cpfile<CR>|" go to previous file in quickfix

nnoremap ]l :lnext<CR>|" go to next line in location list
nnoremap [l :lprevious<CR>|" go to previous line in location list
nnoremap ]L :lnfile<CR>|" go to next file in location list
nnoremap [L :lpfile<CR>|" go to previous file in location list

" clipboard
if !has('clipboard') && executable('clip.exe')
    " Copy to Windows clipboard under WSL
    vnoremap <leader>y "sy:call system('clip.exe', @s)<CR>|" Copy visual selection
    nnoremap <leader>y% :let @s=expand("%")<CR>:call system('clip.exe', @s)<CR>|" Copy current filename
else
    vnoremap <leader>y "+y
    nnoremap <leader>y% :let @+=expand("%")<CR>
endif

" git
nnoremap <leader>gs :Git<CR>
nnoremap <leader>ga :Git add %<CR>
nnoremap <leader>gA :Git reset -- %<CR>
nnoremap <leader>gc :keepalt Git commit -v <CR>
nnoremap <leader>gC :keepalt Git commit -v --amend <CR>
nnoremap <leader>g= :keepalt Git diff % <CR>:wincmd _<CR>:setlocal bufhidden=wipe buftype=nowrite readonly nobuflisted<CR>
nnoremap <leader>gp gg:Ghdiffsplit <CR>
nnoremap <leader>gl :let _tmpfile=tempname()<bar>:silent execute '!git l -50 >'._tmpfile<bar>:silent execute 'keepalt split '._tmpfile<bar>:wincmd _<bar>:setlocal bufhidden=wipe buftype=nowrite readonly nobuflisted<bar>:unlet _tmpfile<bar>:redraw!<CR>

" toggle options
nnoremap <silent> <leader>oe :call Ban_SetDefaultEditOptions()<CR>
nnoremap <silent> <leader>od :call Ban_SetDefaultDiffOptions()<CR>
" nnoremap <silent> <leader>ocl :let _grps={synIDattr(hlID("customDarkCursorLine"), "bg"): 'customLightCursorLine', synIDattr(hlID("customLightCursorLine"), "bg"): 'customDarkCursorLine'}<bar>:let _new_grp=_grps[synIDattr(synIDtrans(hlID("CursorLine")), "bg")]<bar>:execute 'hi! link CursorLine '._new_grp<bar>unlet _grps _new_grp<bar>redraw!<CR>|" change CursorLine based on a dictionary with keys inverted with highlight group names. Key is bgcolor. Value is highlight group name.
nnoremap <silent> <leader>ocl
    \ :let _grps={
    \       synIDattr(hlID("customDarkCursorLine"), "bg"): 'customLightCursorLine',
    \       synIDattr(hlID("customLightCursorLine"), "bg"): 'customDarkCursorLine'
    \ }<bar>
    \ :let _new_grp=_grps[synIDattr(synIDtrans(hlID("CursorLine")), "bg")]<bar>
    \ :execute 'hi! link CursorLine '._new_grp<bar>
    \ :unlet _grps _new_grp<bar>
    \ :redraw!<CR>
    \ |" change CursorLine based on a dictionary with keys inverted with highlight group names. Key is bgcolor. Value is highlight group name.
nnoremap <silent> <leader>on :setlocal number!<CR>
nnoremap <silent> <leader>op :set paste!<CR>:set paste?<CR>
nnoremap <silent> <leader>ow :setlocal wrap!<CR>:set wrap?<CR>
nnoremap <leader>o :setlocal










" Abbreviations: {{{1
" ==============================================================================

cnoreabbrev lgrep\ lgrep -r./*<Left><Left><Left>
cnoreabbrev lgrepnt\ lgrep lgrep --exclude=tests -r./*<Left><Left><Left>










" Functions: {{{1
" ==============================================================================


function! Ban_SetDefaultEditOptions(scope = 'local')
    let command = (a:scope == 'global') ?  'set' : 'setlocal'
    execute command . ' wrap wrapscan hlsearch cursorline nocursorcolumn number norelativenumber'
endfunction

function! Ban_SetDefaultDiffOptions()
    " {{{2
    let curtab_winids = map(filter(getwininfo(), 'v:val.tabnr == tabpagenr()'), 'v:val.winid')
    let are_diff_windows = map(copy(curtab_winids), {idx, winid -> {'winid': winid, 'is_diff': getwinvar(winid, '&diff')}})
    let only_diff_windows = filter(copy(are_diff_windows), 'v:val.is_diff == 1')
    call map(only_diff_windows, {idx, item -> win_execute(item.winid, 'setlocal wrap wrapscan hlsearch nocursorline nocursorcolumn nonumber relativenumber')})
endfunction |" 2}}}

function! Ban_MoveLine(mode, direction)
    " {{{2
    let offset = #{down:"+1", up:"-2"}
    if a:mode == "normal"
        execute 'move .' .offset[a:direction]
    elseif a:mode == "visual"
        let target = #{down:"'>", up:"'<"}
        execute "'<,'>move " .target[a:direction] .offset[a:direction]
        normal gv
    endif
endfunction |" 2}}}

function! Ban_IsolateLineWithSpacesAround(mode) range
    " {{{2
    call append(a:lastline, ['----------- focus here ^', ''])
    execute a:lastline+1 .'Commentary'
    call append(a:firstline -1, ['', '----------- focus here v'])
    execute a:firstline+1 .'Commentary'
    if a:mode == "visual"
        normal gv
    endif
endfunction |" 2}}}

function! Ban_InvertCommentOnRangeOfLines(mode) range
    " {{{2
    if a:mode == "visual"
        let first_lnum = a:firstline
        let last_lnum = a:lastline
    elseif a:mode == "normal"
        let first_lnum = a:firstline
        let last_lnum = a:lastline
    else
        let first_lnum = line("'[")
        let last_lnum = line("']")
    endif

    for lnum in range(first_lnum, last_lnum)
        execute lnum ."Commentary"
    endfor
endfunction |" 2}}}

function! Ban_DuplicateLine(mode)
    " {{{2
    if a:mode == "normal"
        let _pos = col('.')
        copy .
        execute 'normal ' ._pos. '|'
    elseif a:mode == "visual"
        '<,'>copy '>
        normal '>j
    endif
endfunction |" 2}}}

function! Ban_DuplicateAndCommentLine(mode)
    " {{{2
    if a:mode == "normal"
        let _pos = col('.')
        copy .
        normal k
        .Commentary
        normal j
        execute 'normal ' ._pos. '|'
    elseif a:mode == "visual"
        '<,'>copy '>
        normal gv
        '<,'>Commentary
        execute "normal \<Esc>"
        normal '>j
    endif
endfunction |" 2}}}










" Autocommands: {{{1
" ==============================================================================

augroup aug_filetype_css
    au!
    autocmd FileType css setlocal tabstop=2
augroup END

augroup aug_filetype_fugitive
    au!
    autocmd FileType fugitive setlocal cursorline
augroup END

augroup aug_filetype_gitcommit
    " {{{2
    au!
    autocmd FileType gitcommit setlocal
    autocmd BufRead COMMIT_EDITMSG setlocal nocursorline
    autocmd BufRead COMMIT_EDITMSG call execute(['normal gg'])

    " go to next/prev file in commit
    autocmd FileType gitcommit nnoremap <silent> <buffer> ]] :call search('^diff\\|^# On branch', "z")<CR>ztzv
    autocmd FileType gitcommit nnoremap <silent> <buffer> [[ :call search('^diff\\|^# On branch', "b")<CR>ztzv

    " go to next/prev change
    autocmd FileType gitcommit nnoremap <silent> <buffer> <expr> ]c search('^@@', "zW") ? ':call search("^@@", "zW")\|normal zz<CR>' : ':echohl WarningMsg\|echo "Last chunck"\|echohl None<CR>'
    autocmd FileType gitcommit nnoremap <silent> <buffer> <expr> [c search('^@@', "bW") ? ':call search("^@@", "bW")\|normal zz<CR>' : ':echohl WarningMsg\|echo "First chunck"\|echohl None<CR>'
augroup END |" 2}}}

augroup aug_filetype_html
    " {{{2
    au!
    autocmd FileType html,htmldjango setlocal tabstop=2
    autocmd FileType html,htmldjango let b:match_words = '<:>,{{:}},{%:%},{:},[:],(:),<!--:-->' .
        \ ',<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>' .
        \ ',{% block:{% endblock,{% if:{% endif,{% for:{% endfor,{% macro:{% endmacro' .
        \ ',{% call:{% endcall,{% filter:{% endfilter,{% set:{% endset'
augroup END |" 2}}}

augroup aug_filetype_json
    au!
    autocmd FileType json setlocal tabstop=2
augroup END

augroup aug_filetype_make
    au!
    autocmd FileType make setlocal noexpandtab
augroup END

augroup aug_filetype_php
    au!
    autocmd FileType php setlocal foldmethod=marker foldmarker={,}
augroup END

augroup aug_filetype_python_settings
    " {{{2
    au!
    autocmd FileType python setlocal foldmethod=indent
    autocmd FileType python setlocal equalprg=~/.local/bin/python-style

    autocmd FileType python syn keyword pythonTodo          TODO FIXME NOTE contained
    autocmd FileType python hi! link pythonBuiltin Statement
    autocmd FileType python hi! link pythonDocTest2 Comment
augroup END |" 2}}}

augroup aug_filetype_python_mappings
    " {{{2
    " Particular way to "make"
    autocmd FileType python nnoremap <silent> <buffer> <leader>m :update<CR>:call flake8#Flake8()<CR>

    " Mapping to navigate to object definition in split window
    autocmd FileType python nnoremap <buffer> <localleader>D :split<CR>:call jedi#goto()<CR>

    " edit selected module name
    autocmd FileType python xnoremap <localleader>f :<C-U>let @s = BanPython_TransformSelectedTextIntoFilename() <CR>

    " Mappings for classes, functions and docstrings text-objects
    autocmd FileType python xnoremap <buffer> ic <Plug>(textobj-python-class-i)
    autocmd FileType python onoremap <buffer> ic <Plug>(textobj-python-class-i)
    autocmd FileType python xnoremap <buffer> ac <Plug>(textobj-python-class-a)
    autocmd FileType python onoremap <buffer> ac <Plug>(textobj-python-class-a)
    autocmd FileType python xnoremap <buffer> if <Plug>(textobj-python-function-i)
    autocmd FileType python onoremap <buffer> if <Plug>(textobj-python-function-i)
    autocmd FileType python xnoremap <buffer> af <Plug>(textobj-python-function-a)
    autocmd FileType python onoremap <buffer> af <Plug>(textobj-python-function-a)
    autocmd FileType python xnoremap <buffer> ad <Plug>(PythonsenseOuterDocStringTextObject)
    autocmd FileType python onoremap <buffer> ad <Plug>(PythonsenseOuterDocStringTextObject)
    autocmd FileType python xnoremap <buffer> id <Plug>(PythonsenseInnerDocStringTextObject)
    autocmd FileType python onoremap <buffer> id <Plug>(PythonsenseInnerDocStringTextObject)
augroup END |" 2}}}

augroup aug_filetype_python_abbrev
    " {{{2
    autocmd FileType python inoreabbrev <buffer> logi\ logger.info(f"{base_log} -")<Left><Left>
augroup END |" 2}}}

augroup aug_filetype_python_testing
    " {{{2
    " initialize global test variables
    autocmd FileType python let g:test_command =
        \ (exists('g:test_command')) ? g:test_command :
        \     (exists('$VIM_TEST_COMMAND')) ? $VIM_TEST_COMMAND :
        \         (executable('pytest')) ? 'pytest' : ''
    autocmd FileType python let g:test_target = (exists('g:test_target')) ? g:test_target : ''

    " autocmd FileType python nnoremap t<CR> :wall <CR>:execute Ban_Run('run-test '. BanPython_BuildTestCommand(g:test_command, g:test_target))<CR>|" Run tests in current vim session
    autocmd FileType python nnoremap t<CR>
        \ :wall <bar>
        \ :let _command = BanPython_BuildTestCommand(g:test_command, g:test_target)<bar>
        \ :execute Ban_Run('run-test '. _command)<bar>
        \ :unlet _command<CR>
        \ |" Run tests in current vim session

    " autocmd FileType python nnoremap <silent> T<CR> :update<CR>:let _all_commands=g:test_command .' '. g:test_target<CR>:execute '!tmux send-keys -t .+ -l "run-with-time '. _all_commands .'"'<CR>:execute '!tmux send-keys -t .+ Enter'<CR><CR>|" Run tests in tmux next pane
    autocmd FileType python nnoremap <silent> T<CR>
        \ :update<bar>
        \ :let _command=g:test_command .' '. g:test_target<bar>
        \ :execute '!tmux send-keys -t .+ -l "run-with-time '. _command .'"'<bar>
        \ :execute '!tmux send-keys -t .+ Enter'<bar>
        \ :unlet _command<CR>
        \ |" Run tests in tmux next pane

    " Mappings to help with tests (this is a big section).
    " All mappings are prefixed with \t.
    "
    " \tC configure the test command (along with its arguments).
    " Examples below:
    "   - pytest --pyargs
    "   - python manage.py test -v 2
    "   - python -m unittest
    autocmd FileType python nnoremap <localleader>tC :let g:test_command='<c-r>=g:test_command<cr>'

    autocmd FileType python nnoremap <buffer> <localleader>tn :call BanPython_MakeValidPythonTestName() <CR>|" Make a test name from current line contents

    " Mark targets
    autocmd FileType python nnoremap <buffer> <localleader>ta :wall <CR>:call BanPython_SetAllSuiteAsTestTarget() <CR>:echo g:test_target. ' set as test target.'<CR>
    autocmd FileType python nnoremap <buffer> <localleader>tp :wall <CR>:call BanPython_SetCurrentPackageAsTestTarget(g:test_command) <CR>:echo g:test_target. ' set as test target.'<CR>
    autocmd FileType python nnoremap <buffer> <localleader>t% :wall <CR>:call BanPython_SetCurrentModuleAsTestTarget(g:test_command) <CR>:echo g:test_target. ' set as test target.'<CR>
    autocmd FileType python nnoremap <buffer> <localleader>tc :wall <CR>:call BanPython_SetCurrentClassAsTestTarget(g:test_command) <CR>:echo g:test_target. ' set as test target.'<CR>
    autocmd FileType python nnoremap <buffer> <localleader>tm :wall <CR>:call BanPython_SetCurrentMethodAsTestTarget(g:test_command) <CR>:echo g:test_target. ' set as test target.'<CR>
    autocmd FileType python nnoremap <buffer> <localleader>tf :wall <CR>:call BanPython_SetCurrentFunctionAsTestTarget(g:test_command) <CR>:echo g:test_target. ' set as test target.'<CR>

    " autocmd FileType python nnoremap <silent> <localleader>tr
    "     \ :let _curpos = getcurpos()<CR>
    "     \ :call search('def test', 'besc')<CR>
    "     \ :execute 'normal b"sye'<CR>
    "     \ :let _curr_method = @s<CR>
    "     \ :let _target = substitute(expand('%'), '.*joe/tests/', '', '').'::'._curr_method<CR>
    "     \ :call setpos('.', _curpos)<CR>
    "     \ :execute '!tmux send-keys -t JOE:src.1 -l "t ' .trim(_target). '"'<CR>
    "     \ :execute '!tmux send-keys -t JOE:src.1 Enter'<CR><CR>
    "     \ :unlet _curpos _curr_method _target<CR>
    "     \|" Copy current filename and function/method to register z in pytest format (JOE specific)
augroup END |" 2}}}

augroup aug_filetype_python_functions
    " {{{2
    function! Ban_Run(command)
        " {{{3
        " Run an external command using internal or external terminal

        if !exists('g:ban_run_internal')
            if has('gui_running')
                let g:ban_run_internal = 1
            elseif has('nvim')
                let g:ban_run_internal = 1
            else
                let g:ban_run_internal = 0
            endif
        endif

        let quote = "'"
        if g:ban_run_internal == 1
            if has('nvim')
                let prefix = 'tabnew | terminal '. &shell .' -c ' . quote
                let suffix = quote
            else
                let prefix = 'tabnew | terminal ++curwin ++shell '
                let suffix = ''
            endif
            let command = substitute(a:command, quote, "'\"\\'\"'", 'g')
            let command = substitute(command, '#', '\\#', 'g')
        else
            let prefix = '!'
            let command = a:command
            let suffix = ''
        endif

        return prefix . command . suffix
    endfunction |" 3}}}

    function! BanPython_GetCurrentPythonClassName()
        " {{{3
        execute "normal ms$?^class \<Enter>0w"
        nohls
        let class_name = expand('<cword>')
        execute 'normal g`s'
        return l:class_name
    endfunction |" 3}}}

    function! BanPython_GetCurrentPythonMethodName()
        " {{{3
        execute 'normal ms$?^ \+\(def\|async def\) \+test\w\+(\_s\{-}self?e' . "\<Enter>" . '3b'
        nohls
        let method_name = expand('<cword>')
        execute 'normal g`s'
        return l:method_name
    endfunction |" 3}}}

    function! BanPython_GetCurrentPythonFunctionName()
        " {{{3
        execute 'normal ms$?^\(def\|async def\) \+test\w\+(?e' . "\<Enter>" . 'b'
        nohls
        let function_name = expand('<cword>')
        execute 'normal g`s'
        return l:function_name
    endfunction |" 3}}}

    function! BanPython_MakeValidPythonTestName()
        " {{{3
        " Transform a phrase into a test method name.
        "
        " Transform this:
        "   show user name
        " Into this:
        "   def test_show_user_name(self):
        "
        let x=getline('.')
        let x=substitute(x, '\(\w\) ', '\1_', 'ge')
        let x=substitute(x, '-', '_', 'ge')
        let x=substitute(x, '\(\S\+\)', 'def test_\1(self):', '')
        call setline('.', x)
    endfunction |" 3}}}

    function! BanPython_GetTestSeparators(command)
        " {{{3
        if a:command =~ 'unittest'
            let path_separator = '.'
            let expand_string = '%:.:r'
        elseif a:command =~ '--pyargs'
            let path_separator = '.'
            let expand_string = '%:.:r'
        elseif a:command =~ 'manage.py test'
            let path_separator = '.'
            let expand_string = '%:.:r'
        else
            let path_separator = '/'
            let expand_string = '%:.'
        endif

        if a:command =~ 'pytest'
            let class_separator = '::'
        else
            let class_separator = '.'
        endif

        return [path_separator, class_separator, expand_string]
    endfunction |" 3}}}

    function! BanPython_SetAllSuiteAsTestTarget()
        let g:test_target = ''
    endfunction

    function! BanPython_SetCurrentPackageAsTestTarget(command)
        let [path_sep, _, _] = BanPython_GetTestSeparators(a:command)
        let g:test_target = substitute(expand('%:.:h'), '/', path_sep, 'g')
    endfunction

    function! BanPython_SetCurrentModuleAsTestTarget(command)
        let [path_sep, _, expand_arg] = BanPython_GetTestSeparators(a:command)
        let g:test_target = substitute(expand(expand_arg), '/', path_sep, 'g')
    endfunction

    function! BanPython_SetCurrentClassAsTestTarget(command)
        " {{{3
        let [path_sep, class_sep, expand_arg] = BanPython_GetTestSeparators(a:command)
        let target = expand(expand_arg) . class_sep . BanPython_GetCurrentPythonClassName()
        let g:test_target = substitute(target, '/', path_sep, 'g')
    endfunction |" 3}}}

    function! BanPython_SetCurrentMethodAsTestTarget(command)
        " {{{3
        let [path_sep, class_sep, expand_arg] = BanPython_GetTestSeparators(a:command)
        let target = expand(expand_arg) . class_sep . BanPython_GetCurrentPythonClassName() . class_sep . BanPython_GetCurrentPythonMethodName()
        let g:test_target = substitute(target, '/', path_sep, 'g')
    endfunction |" 3}}}

    function! BanPython_SetCurrentFunctionAsTestTarget(command)
        " {{{3
        let [path_sep, class_sep, expand_arg] = BanPython_GetTestSeparators(a:command)
        let target = expand(expand_arg) . class_sep . BanPython_GetCurrentPythonFunctionName()
        let g:test_target = substitute(target, '/', path_sep, 'g')
    endfunction |" 3}}}

    function! BanPython_BuildTestCommand(command, target)
        " {{{3
        " The {{ target }} part is used mainly with 'make test'.
        " As you know we can't pass arguments to 'make' as we do to shell scripts.
        " The easiest way is setting an environment variable and call 'make'.
        " So, we use the 'var=value command' syntax.
        "
        " Let's see an example.
        "
        " command: target='--pyargs {{ target }}' make test
        " target: some.package.module::Class::test_method
        "
        " Becomes
        "
        " target='--pyargs some.package.module::Class::test_method' make test
        "

        if a:command =~ '{{ target }}'
            let x = substitute(a:command, '{{ target }}', a:target, 'g')
            return 'eval "'. x .'"'
        endif
        return a:command .' '. a:target
    endfunction |" 3}}}

    function! BanPython_TransformSelectedTextIntoFilename()
        execute 'normal gv"sy'
        return substitute(@s, '\.', '/', 'ge') .'.py'
    endfunction
augroup END |" 2}}}

augroup aug_filetype_sh
    au!
    autocmd FileType sh setlocal noexpandtab
augroup END

augroup aug_filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker shiftwidth=4
augroup END

augroup aug_quickfix
    " {{{2
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost l* lwindow
    autocmd FileType qf setlocal nocursorline
augroup END |" 2}}}

augroup aug_quickscope_colors
    " {{{2
    autocmd!
    autocmd ColorScheme * highlight QuickScopePrimary guifg=Cyan gui=underline,bold ctermfg=Cyan cterm=underline
    autocmd ColorScheme * highlight QuickScopeSecondary guifg=Magenta gui=underline,bold ctermfg=Magenta cterm=underline
augroup END |" 2}}}

augroup aug_terminal_mode
    au!
    silent! autocmd TerminalWinOpen * setlocal nonumber norelativenumber
augroup END










" Plugins: {{{1
" ==============================================================================


call plug#begin('~/.vim/bundle')


" Must Have Plugins: {{{2

" File system explorer
Plug 'scrooloose/nerdtree'
let NERDTreeIgnore=['__pycache__[[dir]]']
let NERDTreeHijackNetrw = 0

" Fuzzy finder
Plug 'junegunn/fzf', {'dir': '~/.vim/bundle/fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'

" Up to date syntax files
Plug 'viniciusban/vim-polyglot'

" Python autocompletion
" The goto_command is a killer feature.
Plug 'davidhalter/jedi-vim'
let g:jedi#popup_on_dot=0
let g:jedi#show_call_signatures_delay=100
let g:jedi#goto_command = '<localleader>d'
let g:jedi#goto_assignments_command = ''
let g:jedi#goto_stubs_command = ''
let g:jedi#rename_command = '<localleader>r'
let g:jedi#usages_command = '<localleader>n'

" My discreet color scheme
Plug 'viniciusban/vim-white-on-black-colorscheme'



" Good To Have Plugins: {{{2

" Git inside vim
Plug 'tpope/vim-fugitive'

" Comment lines.
" gcc, gc<motion>, {Visual}gc
Plug 'tpope/vim-commentary'  | " gcc, gc<motion>, {Visual}gc

" colorize parentheses
Plug 'luochen1990/rainbow'
let g:rainbow_active = 0
let _only_to_test_rainbow_colors = trim('1'. trim('2'. trim('3'. trim('4'. trim('5'. trim('6'. trim('7'. trim('8'))))))))
let g:rainbow_conf = {
    \'guifgs': [
        \'#BFBFBF', '#D9534F', '#3399FF', '#00CC66',
        \'#FFB3BA', '#FF00FF', '#00FFFF', '#C02F1D'
    \]
\}

" Run flake8
Plug 'nvie/vim-flake8'

" My mappings for markdown
Plug 'viniciusban/vim-ft-markdown'



" Nice To Have Plugins: {{{2

" Add delimiters to text.
" sa, sd, sr
Plug 'machakann/vim-sandwich'

" Class outline viewer
Plug 'majutsushi/tagbar'
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_autofocus = 1
let g:tagbar_position = 'leftabove vertical'
let g:tagbar_case_insensitive = 1

" Quickly navigate to first and second occurrence of char in line
Plug 'unblevable/quick-scope'
let g:qs_enable=0  |" start plugin with highlight disabled

" Expand abbreviations
Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key = '<C-\>'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsSnippetDirectories=[$HOME.'/src/vim-snippets']

" Replace existing text with the contents of a register
" <register>gr{motion}, {Visual}<register>gr
" Plug 'inkarkat/vim-ReplaceWithRegister'

" Match keywords.
" %, g%, a%, i%, and more
" Plug 'andymass/vim-matchup'  | " %, g%, a%, i%, and more

" required by other text object plugins
" Plug 'kana/vim-textobj-user'

" Select similarly indented lines
" ai, ii
" Plug 'kana/vim-textobj-indent'

" Text objects to select comments
"  ac, ic (remapped below)
" Plug 'glts/vim-textobj-comment'
" omap aC <Plug>(textobj-comment-a)
" xmap aC <Plug>(textobj-comment-a)
" omap iC <Plug>(textobj-comment-i)
" xmap iC <Plug>(textobj-comment-i)

" Text objects for Python functions and classes
" ac, ic, af, if
" Plug 'bps/vim-textobj-python' | " ac, ic, af, if.
" let g:is_pythonsense_suppress_object_keymaps = 1
" let g:is_pythonsense_suppress_motion_keymaps = 1

" Text objects for Python docstrings
" ad, id
" See https://github.com/viniciusban/myconfigs/issues/1
" Plug 'jeetsukumaran/vim-pythonsense'

" " Insert or delete brackets, parens, quotes in pair
" Plug 'jiangmiao/auto-pairs'
" let g:AutoPairsShortcutFastWrap = '<leader>pe'
" let g:AutoPairsShortcutToggle = '<leader>pp'
" let g:AutoPairsFlyMode = 1

" Colorize color names and hex codes
if has('nvim')
    Plug 'norcalli/nvim-colorizer.lua'
else
    Plug 'chrisbra/Colorizer'
endif

call plug#end()


" For 'norcalli/nvim-colorizer.lua' plugin
if has('nvim')
    lua require'colorizer'.setup()
endif










" Colors And Last Minute Settings: {{{1
" ==============================================================================
"


call Ban_SetDefaultEditOptions('global')

syntax reset
colorscheme white_on_black

let g:loaded_vimrc=1

" the end.
