" leader keys
let mapleader=','
let maplocalleader='\'


unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" plugins
" install vim-plug:
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin('~/.vim/bundle')
Plug 'viniciusban/vim-polyglot'  | " up to date syntax files
Plug 'viniciusban/vim-distractionfree-colorschemes'
Plug 'luochen1990/rainbow' | " colorize parentheses
Plug 'ap/vim-css-color'  | " show the color in CSS
Plug 'tpope/vim-commentary'  | " gcc, gc<motion>, {Visual}gc
Plug 'machakann/vim-sandwich'  | " sa, sd, sr
Plug 'andymass/vim-matchup'  | " %, g%, a%, i%, and more
Plug 'kana/vim-textobj-user' | " required by other text object plugins
Plug 'kana/vim-textobj-indent' | " ai, ii
Plug 'glts/vim-textobj-comment' | " ac, ic (remapped below to...)
Plug 'bps/vim-textobj-python' | " ac, ic, af, if.
Plug 'jeetsukumaran/vim-pythonsense' | " ad, id (docstring objects). See https://github.com/viniciusban/myconfigs/issues/1
Plug 'inkarkat/vim-ReplaceWithRegister'  | " <register>gr{motion}, {Visual}<register>gr
Plug 'tpope/vim-unimpaired'  | " [q, ]q, [e, ]e, etc.
Plug 'davidhalter/jedi-vim'
Plug 'SirVer/ultisnips'
Plug 'viniciusban/vim-ft-markdown'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', {'dir': '~/.vim/bundle/fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
call plug#end()


" rainbow
let g:rainbow_active = 0

" vim-text-object-comment
omap aC <Plug>(textobj-comment-a)
xmap aC <Plug>(textobj-comment-a)
omap iC <Plug>(textobj-comment-i)
xmap iC <Plug>(textobj-comment-i)

" vim-textobj-python
let g:is_pythonsense_suppress_object_keymaps = 1
let g:is_pythonsense_suppress_motion_keymaps = 1

" jedi-vim
let g:jedi#popup_on_dot=0
let g:jedi#show_call_signatures_delay=100

" ultisnips
let g:UltiSnipsSnippetDirectories=[$HOME.'/src/vim-snippets']

" emmet
let g:user_emmet_leader_key = '<C-\>'

" NERDTree
let NERDTreeIgnore=['__pycache__[[dir]]']
let NERDTreeHijackNetrw = 0
map <leader>2 :NERDTreeToggle<CR>

" Enable filtering the quickfix list. See `:h cfilter-plugin`
packadd cfilter

" my own functions
function! Ban_Run(command)
    " Run an external command using internal or external terminal

    if !exists('g:ban_run_internal')
        if has('gui_running')
            let g:ban_run_internal = 1
        elseif has('nvim')
            let g:ban_run_internal = 1
        else
            let g:ban_run_internal = 0
        endif
    endif

    let quote = "'"
    if g:ban_run_internal == 1
        if has('nvim')
            let prefix = 'tabnew | terminal '. &shell .' -c ' . quote
            let suffix = quote
        else
            let prefix = 'tabnew | terminal ++curwin ++shell '
            let suffix = ''
        endif
        let command = substitute(a:command, quote, "'\"\\'\"'", 'g')
        let command = substitute(command, '#', '\\#', 'g')
    else
        let prefix = '!'
        let command = a:command
        let suffix = ''
    endif

    return prefix . command . suffix
endfunction

function! BanPython_GetCurrentPythonClassName()
    execute "normal ms$?^class \<Enter>0w"
    nohls
    let class_name = expand('<cword>')
    execute 'normal g`s'
    return l:class_name
endfunction

function! BanPython_GetCurrentPythonMethodName()
    execute 'normal ms$?^ \+def \+test\w\+(\_s\{-}self?' . "\<Enter>" . '02w'
    nohls
    let method_name = expand('<cword>')
    execute 'normal g`s'
    return l:method_name
endfunction

function! BanPython_GetCurrentPythonFunctionName()
    execute 'normal ms$?^def \+test\w\+(\_s\{-}?' . "\<Enter>" . '0w'
    nohls
    let function_name = expand('<cword>')
    execute 'normal g`s'
    return l:function_name
endfunction

function! BanPython_MakeValidPythonTestName()
    " Transform a phrase into a test method name.
    "
    " Transform this:
    "   show user name
    " Into this:
    "   def test_show_user_name(self):
    "
    let x=getline('.')
    let x=substitute(x, '\(\w\) ', '\1_', 'ge')
    let x=substitute(x, '-', '_', 'ge')
    let x=substitute(x, '\(\S\+\)', 'def test_\1(self):', '')
    call setline('.', x)
endfunction

function! BanPython_GetTestSeparator()
    if g:test_command =~ 'pytest'
        return '::'
    else
        return '.'
    endif
endfunction

function! BanPython_RunCurrentTestMethod()
    let sep = BanPython_GetTestSeparator()
    let g:test_target = expand('%:.:r') . sep . BanPython_GetCurrentPythonClassName() . sep . BanPython_GetCurrentPythonMethodName()
    let g:test_target = substitute(g:test_target, '/', '.', 'g')
    let test_command = BanPython_BuildTestCommand(g:test_command, g:test_target)
    execute Ban_Run('run-test '. test_command)
endfunction

function! BanPython_RunCurrentTestFunction()
    let sep = BanPython_GetTestSeparator()
    let g:test_target = expand('%:.:r') . sep . BanPython_GetCurrentPythonFunctionName()
    let g:test_target = substitute(g:test_target, '/', '.', 'g')
    let test_command = BanPython_BuildTestCommand(g:test_command, g:test_target)
    execute Ban_Run('run-test '. test_command)
endfunction

function! BanPython_RunCurrentTestCase()
    let sep = BanPython_GetTestSeparator()
    let g:test_target = expand('%:.:r') . sep . BanPython_GetCurrentPythonClassName()
    let g:test_target = substitute(g:test_target, '/', '.', 'g')
    let test_command = BanPython_BuildTestCommand(g:test_command, g:test_target)
    execute Ban_Run('run-test '. test_command)
endfunction

function! BanPython_RunCurrentTestModule()
    let g:test_target = expand('%:.:r')
    let g:test_target = substitute(g:test_target, '/', '.', 'g')
    let test_command = BanPython_BuildTestCommand(g:test_command, g:test_target)
    execute Ban_Run('run-test '. test_command)
endfunction

function! BanPython_RunCurrentTestPackage()
    let g:test_target = expand('%:.:h')
    let g:test_target = substitute(g:test_target, '/', '.', 'g')
    let test_command = BanPython_BuildTestCommand(g:test_command, g:test_target)
    execute Ban_Run('run-test '. test_command)
endfunction

function! BanPython_RunAllTestSuite()
    let g:test_target = ''
    let test_command = BanPython_BuildTestCommand(g:test_command, '')
    execute Ban_Run('run-test '. test_command)
endfunction

function! BanPython_BuildTestCommand(command, target)
    " The {{ target }} part is used mainly with 'make test'.
    " As you know we can't pass arguments to 'make' as we do to shell scripts.
    " The easiest way is setting an environment variable and call 'make'.
    " So, we use the 'var=value command' syntax.
    "
    " Let's see an example.
    "
    " command: target='--pyargs {{ target }}' make test
    " target: some.package.module::Class::test_method
    "
    " Becomes
    "
    " target='--pyargs some.package.module::Class::test_method' make test
    "

    if a:command =~ '{{ target }}'
        let x = substitute(a:command, '{{ target }}', a:target, 'g')
        return 'eval "'. x .'"'
    endif
    return a:command .' '. a:target
endfunction

function! BanPython_TransformSelectedTextIntoFilename()
    let unnamed_register = @"
    execute 'normal gvy'
    let selected_text = @"
    let @" = unnamed_register
    let filename = substitute(selected_text, '\.', '/', 'ge') .'.py'
    return filename
endfunction

" ==================================================

" elements of interface
set number
set scrolloff=0
set hls
nmap <BS> :noh<CR>

set list listchars=tab:››,trail:·,nbsp:·,extends:→,precedes:←
set cpoptions+=n showbreak=→\ 

set wildmode=list:longest,full

let &t_SI = "\<Esc>]12;green\x7" | " solid non-blinking cursor
let &t_SR = &t_SI
let &t_EI = &t_SI

" mouse
set ttymouse=xterm2  | " enable resizing windows with the mouse

" syntax and colors
syntax reset
silent! colorscheme yellowonblack
if exists('+termguicolors')
  " truecolor under tmux
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
set termguicolors

map <leader>4 :execute 'colorscheme ' . g:next_colorscheme <CR>
" Show highlight group of word under cursor
map <leader>0 :echo 'hi<' . synIDattr(synID(line('.'),col('.'),1),'name') . '> trans<'
    \ . synIDattr(synID(line('.'),col('.'),0),'name') . '> lo<'
    \ . synIDattr(synIDtrans(synID(line('.'),col('.'),1)),'name') . '>'<CR>

" sane editing
set expandtab tabstop=4 softtabstop=4 shiftwidth=0 | " <TAB> is 4 spaces, once for all!
set ignorecase smartcase
set foldenable foldmethod=indent foldlevel=2
nmap <Space> <C-F>

" buffers
set hidden
nmap <CR> :update<CR>
map <leader>6 :b # <CR>
nmap <silent> <buffer> == :update<CR>gg=G

" utilities
set grepprg=ack\ --nogroup\ $*

" clipboard
if !has('clipboard') && executable('clip.exe')
    vmap <leader>y "sy:call system('clip.exe', @s)<CR>
else
    vmap <leader>y "+y
endif

" git
map <leader>ga :terminal ++shell ++close git add % 
map <leader>gd :terminal ++shell git diff % <CR><C-W>_
map <leader>gc :terminal ++shell ++close git commit -v 
map <leader>gl :terminal ++shell ++noclose git l 

" terminal mode
augroup ftTerminal
    au!
    silent! autocmd TerminalWinOpen * setlocal nonumber norelativenumber
    silent! autocmd TerminalOpen * setlocal nonumber norelativenumber
augroup END

" css files
augroup ftCSS
    au!
    autocmd FileType css setlocal tabstop=2
augroup END

" html files
augroup ftHTML
    au!
    autocmd FileType html,htmldjango setlocal foldlevel=4 tabstop=2
    autocmd FileType html,htmldjango let b:match_words = '<:>,{{:}},{%:%},{:},[:],(:),<!--:-->' .
        \ ',<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>' .
        \ ',{% block:{% endblock,{% if:{% endif,{% for:{% endfor,{% macro:{% endmacro' .
        \ ',{% call:{% endcall,{% filter:{% endfilter,{% set:{% endset'
augroup END

" json files
augroup ftJson
    au!
    autocmd FileType json setlocal tabstop=2
augroup END

" php files
augroup ftPHP
    au!
    autocmd FileType php setlocal foldmethod=marker foldmarker={,}
augroup END

" python files
augroup ftPython
    au!
    autocmd FileType python call FtPython()
augroup END

function! FtPython()
    setlocal foldmethod=indent foldlevel=3
    if filereadable('Makefile')
        setlocal equalprg=make\ --no-print-directory\ --silent\ pep8
        setlocal makeprg=TARGET=%\ make\ --no-print-directory\ --silent
    elseif executable('pylint')
        setlocal equalprg=~/.local/bin/binscripts/python-style
        setlocal makeprg=pylint\ %
    elseif executable('flake8')
        setlocal equalprg=~/.local/bin/binscripts/python-style
        setlocal makeprg=flake8\ %
    endif
    map <buffer> <localleader>m :update<CR>:make %<CR>

    " Mappings for classes, functions and docstrings text-objects
    xmap <buffer> ic <Plug>(textobj-python-class-i)
    omap <buffer> ic <Plug>(textobj-python-class-i)
    xmap <buffer> ac <Plug>(textobj-python-class-a)
    omap <buffer> ac <Plug>(textobj-python-class-a)
    xmap <buffer> if <Plug>(textobj-python-function-i)
    omap <buffer> if <Plug>(textobj-python-function-i)
    xmap <buffer> af <Plug>(textobj-python-function-a)
    omap <buffer> af <Plug>(textobj-python-function-a)
    xmap  <buffer> ad <Plug>(PythonsenseOuterDocStringTextObject)
    omap  <buffer> ad <Plug>(PythonsenseOuterDocStringTextObject)
    xmap  <buffer> id <Plug>(PythonsenseInnerDocStringTextObject)
    omap  <buffer> id <Plug>(PythonsenseInnerDocStringTextObject)

    " edit selected module name
    xmap <localleader>f :<C-U>let @g = BanPython_TransformSelectedTextIntoFilename() <CR>

    " Mappings to help with tests (this is a big section).
    " All mappings are prefixed with \t.
    if !exists('g:test_command')
        let g:test_command = $DEV_TEST_COMMAND
    endif
    if !exists('g:test_target')
        let g:test_target = ''
    endif

    " \tt runs tests.
    map <localleader>tt :wall <CR>:execute Ban_Run('run-test '. BanPython_BuildTestCommand(g:test_command, g:test_target))<CR>
    map t<CR> <localleader>tt

    " \tC configure the test command (along with its arguments).
    " Examples:
    "   - pytest --pyargs
    "   - python manage.py test -v 2
    "   - python -m unittest
    map <localleader>tC :let g:test_command='<c-r>=g:test_command<cr>'

    " \tn Make a test name from current line contents
    map <buffer> <localleader>tn :call BanPython_MakeValidPythonTestName() <CR>

    " Mark the target and run tests
    map <buffer> <localleader>ta :wall <CR>:call BanPython_RunAllTestSuite() <CR>
    map <buffer> <localleader>tp :wall <CR>:call BanPython_RunCurrentTestPackage() <CR>
    map <buffer> <localleader>t% :wall <CR>:call BanPython_RunCurrentTestModule() <CR>
    map <buffer> <localleader>tc :wall <CR>:call BanPython_RunCurrentTestCase() <CR>
    map <buffer> <localleader>tm :wall <CR>:call BanPython_RunCurrentTestMethod() <CR>
    map <buffer> <localleader>tf :wall <CR>:call BanPython_RunCurrentTestFunction() <CR>

    " copy current filename and function/method to register z in pytest format (JOE specific)
    nmap <silent> <localleader>tr :let cursorpos = getcurpos() <CR>:call search('def test', 'besc') <CR>:execute 'normal bye' <CR>:let @z = substitute(expand('%'), '.*joe/tests/', '', '').'::'.getreg('"') <CR>:call setpos('.', cursorpos) <CR>:let test_cmd = "t " .trim(getreg('z'))<CR>:execute '!tmux send-keys -t JOE:src.1 -l "' .test_cmd. '"'<CR>:execute '!tmux send-keys -t JOE:src.1 Enter'<CR><CR>

    syn keyword pythonTodo          TODO FIXME NOTE contained
    hi! link pythonBuiltin Statement
    hi! link pythonDocTest2 Comment
endfunction

" makefiles
augroup ftMake
    au!
    autocmd FileType make setlocal noexpandtab
augroup END

" fugitive buffers
augroup ftFugitive
    au!
    augroup FileType fugitive setlocal cursorline
augroup END

" gitcommit buffers
augroup ftGitCommit
    au!
    augroup FileType gitcommit setlocal nofoldenable
augroup END


" --------------------------------------------------
"  Personal mappings and workflow
" --------------------------------------------------

" duplicate current file
nmap <leader>fd :!cp '%:p' '%:p:h/%:t:r-copy.%:e'

augroup aug_list_items
    au!
    " add item
    autocmd FileType markdown,text nmap <buffer> <localleader>ia o- [ ] 
    autocmd FileType markdown,text imap <buffer> <localleader>ia - [ ] 
    " mark item as doing
    autocmd FileType markdown,text nmap <silent> <buffer> <localleader>i* :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>:s/^\(\s*- \[\).]/\1*]/<CR>:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>
    " mark item as done
    autocmd FileType markdown,text nmap <silent> <buffer> <localleader>ix :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>:s/^\(\s*- \[\).]/\1x]/<CR>:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>

    " go to next/previous list item (any level)
    autocmd FileType markdown,text nmap <silent> <buffer> ]m :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>/^\s*- /<CR>^:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>
    autocmd FileType markdown,text nmap <silent> <buffer> [m :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>0?^\s*- ?<CR>^:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>
    " go to next/previous sibling (same level)
    autocmd FileType markdown,text nmap <silent> <buffer> ]} :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>^:execute '/^' .strpart(getline('.'), 0, col('.')). '/'<CR><CR>^:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>
    autocmd FileType markdown,text nmap <silent> <buffer> [{ :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>^:execute '?^' .strpart(getline('.'), 0, col('.')). '?'<CR><CR>^:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>
    " go to parent
    autocmd FileType markdown,text nmap <silent> <buffer> [( :let _lz=&lazyredraw<CR>:let _hls=&hlsearch<CR>:let _pat=@/<CR>:set nohlsearch lazyredraw<CR>^:execute '?\%<' .col('.'). 'c\S'<CR><CR>^:let @/=_pat<CR>:let &hlsearch=_hls<CR>:noh<CR>:let &lazyredraw=_lz<CR>:unlet _lz _hls _pat<CR>
augroup END

" Run Python test in another tmux pane
augroup ftPython2
    au!
    " makes pytest the default test runner if it is present
    autocmd FileType python if executable('pytest') | let g:test_command='pytest' | endif
    " set current file as the test target
    autocmd FileType python map <silent> <localleader>tF :let file_to_test=substitute(expand("%:p"), $PWD."/", "", "g")<CR>:echo file_to_test. ' set as test target.'<CR>
    " run the test in the other tmux panel
    autocmd FileType python map <silent> <localleader>tt :update<CR>:execute '!tmux send-keys -t .+ -l "' .g:test_command. ' ' .file_to_test. '"'<CR>:execute '!tmux send-keys -t .+ Enter'<CR><CR>
augroup END
