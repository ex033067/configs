# vim: filetype=sh
#
# Set environment for bash.
#
# Open "ps1_customizations.example" for examples of prompt customization.
#
# Open "pyenv_global_command.example" file for example of pyenv global command.


function __aliases() {
    alias ..='cd ..'
    alias .2='cd ../..'
    alias .3='cd ../../..'

    cdp() { cd ~/src/Personal/$@ ; }
    cdl() { cd ~/src/Learn/$@ ; }

    alias l='ls -lhgo'
    alias ll='ls -lh'
    [[ "${OSNAME}" = "Darwin" ]] && alias ls='ls -Gp'
    [[ "${OSNAME}" = "Linux" ]] && alias ls='ls -p --group-directories-first --color=auto'

    alias ack='ack --sort-files --color-filename="bold blue" --color-lineno="blue" --color-match="bold white on_blue" --ignore-dir=is:.venv --ignore-dir=is:venv --ignore-dir=is:env --ignore-dir=is:.vagrant --ignore-file=ext:sqlite3'
    alias djunsafe='export DJANGO_ALLOW_ASYNC_UNSAFE=1'
    alias grep='grep --color=auto'

    alias now='date -u +%y%m%d%H%M'
    alias when='cal -3; date +%H:%M'

    alias j='jupyter notebook --no-browser --NotebookApp.allow_remote_access=True'
    alias jd='docker run --rm -p 8888:8888 -v "${PWD}":/home/jovyan/work jupyter/base-notebook:python-3.10'
}


function __variables() {
    export OSNAME="$(uname)"
    export HISTCONTROL=ignoreboth
    export HISTTIMEFORMAT="%F %T "
    export EDITOR=$(which vim)
    export VISUAL=$EDITOR
    export LC_CTYPE=en_US.UTF-8 # Default UTF-8 makes python crash

    # Colors
    # See colorcodes in section "256 (8-bit) Colors" from
    # http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux
    export PS1_COLOR_RESET="\033[m"
    export PS1_COLOR_DEFAULT='\e[38;5;15;48;5;4m'  # white on blue
    export PS1_COLOR_ERROR='\e[38;5;15;48;5;1m'  # plain white on red
    # Customizations for PS1. See "ps1_customizations.example" file.
    [[ -r ~/.ps1_customizations ]] && source ~/.ps1_customizations

    # if [[ "$TERM_PROGRAM" = "vscode" ]]; then
    if [[ "$TERM_PROGRAM $ORIGINAL_TERM_PROGRAM" =~ "vscode" ]]; then
        # export PS1="\[${PS1_COLOR_RESET}\]\[${PS1_COLOR_DEFAULT}\]\$(__ps1_virtualenv)\$ \[${PS1_COLOR_RESET}\]"
        export ORIGINAL_TERM_PROGRAM="$TERM_PROGRAM"
        export PS1_COLOR_AMBER='\e[38;5;214m'
        export PS1="\[${PS1_COLOR_AMBER}\]→ \$(__ps1_virtualenv)\W \$\[${PS1_COLOR_RESET}\] "
    else
        export PS1="\[${PS1_COLOR_RESET}\]\[${PS1_COLOR_ERROR}\]\$(_exit_status=\$? ; [ \$_exit_status -ne 0 ] && echo ' '\${_exit_status}' ')\[${PS1_COLOR_RESET}\]\[${PS1_COLOR_DEFAULT}\]→ \D{%a %e %T} \W \$(__ps1_virtualenv)\$(__ps1_git)\[${PS1_COLOR_DEFAULT}\]\$\[${PS1_COLOR_RESET}\] "
    fi
}


function __local_customizations() {
    # Use local customization inside ~/bashrc.d directory.
    if [ -d ~/bashrc.d ]; then
        for fname in ~/bashrc.d/*.bash; do
            if [[ -r $fname ]]; then
                . $fname
            fi
        done
        unset fname
    fi
}


function __ps1_virtualenv() {
    if [[ -z "$VIRTUAL_ENV" ]]; then
        return
    fi

    echo "($(basename $VIRTUAL_ENV)) "
    return
}


function __ps1_git() {
    # Show git branch and indicators about status:
    #   - "+" means there are staged changes
    #   - "!" means there are unstaged changes

    # The main concern here is performance. So, I return as soon as
    # possible, avoid calling external processes like
    # grep, sed, etc. and abuse of bash expressions and logic.

    PS1_GIT_STATUS_OUTPUT=$(git status -b --porcelain=2 2>/dev/null)
    if [[ $? -ne 0 ]]; then
        # Not a git repo
        return
    fi

    local branch branch_indicator staged_indicator unstaged_indicator
    local rectype field1 field2 other_fields
    local branch_header="#"
    local untracked_item="?"
    local changed_item="1"
    local renamed_item="2"
    local unmerged_item="u"
    while read rectype field1 field2 other_fields; do
        if [[ -n "${staged_indicator}" && -n "${unstaged_indicator}" ]]; then
            # Indicator are already set. There's nothing more to look for.
            break
        fi
        if [[ -z "${branch}" && "${rectype}" = "${branch_header}" && "${field1}" = "branch.head" ]]; then
            local branch="${field2}"
            continue
        fi

        if [[ "${untracked_item}${unmerged_item}" =~ "${rectype}" ]]; then
            local unstaged_indicator="!"
            continue
        fi

        if [[ "${changed_item}${renamed_item}" =~ "${rectype}" ]]; then
            if [[ "${field1:0:1}" != "." ]]; then
                local staged_indicator="+"
            fi
            if [[ "${field1:1:1}" != "." ]]; then
                local unstaged_indicator="!"
            fi
            continue
        fi
    done < <(echo "${PS1_GIT_STATUS_OUTPUT}")

    if [[ -z "${staged_indicator}${unstaged_indicator}" ]]; then
        local branch_indicator=':'
    fi
    echo "${branch_indicator}${staged_indicator}${unstaged_indicator}${branch} "
    return
}


function __main() {
    set -o vi
    __variables
    __aliases
    __local_customizations

    [ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion || true
}

__main
