#
# Due to property file syntax, a semicolon starts a comment.
#
# To use a semicolon in aliases, enclose it in double quotes.
#

[user]
        name = viniciusban
        email = viniciusban@gmail.com

[versionsort]
    prereleaseSuffix = -alpha
    prereleaseSuffix = -beta
    prereleaseSuffix = -rc
    prereleaseSuffix = -pre

[merge]
        # ff = false

[color]
        ui = 1

[diff]
        tool = vimdiff

[difftool]
        prompt = no

[alias]
        aliases = !git config --list | grep ^alias | cut -d'=' -f 1 | cut -d'.' -f 2 | sort
        branches = branch -a
        remotes = remote -v
        stashes = stash list
        tags = tag -l -n1 --sort="version:refname"

        initialcommit = commit --allow-empty -m 'Initial commit'

        path = rev-parse --show-toplevel
        s = status -s
        pwb = symbolic-ref --short HEAD

        l = log -10 --oneline
        ll = log -10 --abbrev-commit --date=format:'%y-%m-%d %H:%M' --format='tformat:%C(auto)%h %ad %s'

        nevermind = !git reset --hard HEAD && git clean -d -f
        rollbackkk = reset --mixed HEAD^
        rollback-to = reset --hard
        prunetags = fetch --prune origin '+refs/tags/*:refs/tags/*'

        ongoing = "! \
            _create() { \
                [ $(git status -s | wc -l) = '0' ] && echo 'No local changes to save' && return; \
                topic=$(git symbolic-ref --short HEAD); \
                disposable=ongoing-work/$(date -u '+%Y%m%d_%H%M')/${topic}; \
                git checkout -b ${disposable}; \
                git add . \
                && git commit -m 'WIP' \
                && git push origin ${disposable} \
                && git checkout - \
                && git push origin ${topic} ; \
            } ; \
            _apply() { \
                branch=; \
                [ $1 ] && branch=$1; \
                [ -z $branch ] && howmany=$(git branch --list ongoing* | wc -l); \
                [ -z $branch ] && [ ! $howmany = 1 ] && echo 'Choose a branch' && return 1; \
                [ -z $branch ] && branch=$(git branch --list ongoing* | head -n 1); \
                git checkout $branch -- . && git reset HEAD . ; \
            } ; \
            _list() { \
                git branch --list ongoing* ; \
            } ; \
            _help () { \
                echo 'usage: git ongoing [create]'; \
                echo '   or: git ongoing apply <name>'; \
                echo '   or: git ongoing apply [<name>]'; \
                echo '   or: git ongoing [apply] <name>'; \
                echo '   or: git ongoing list'; \
                echo '   or: git ongoing clear'; \
            } ; \
            _clear () { \
                for branch in $(git branch --list ongoing*); do \
                    git branch -D $branch; \
                done \
            } ; \
            _() { \
                [ -z $1 ] && _create && return; \
                [ $1 = help ] && _help && return; \
                [ $1 = list ] && _list && return; \
                [ $1 = create ] && _create && return; \
                [ $1 = clear ] && _clear && return; \
                [ $1 = apply ] && _apply $2 && return ; \
                [ $1 ] && _apply $1 && return ; \
            } ; \
            _"

        pullc = !git fetch --tag --prune origin && git merge origin/$(git rev-parse --abbrev-ref HEAD) $(git rev-parse --abbrev-ref HEAD)

        pushc = "! \
            for remote in $(git remote | grep -v deploy); do \
                echo; echo; \
                echo '['$remote']'; \
                git push --tags $remote $(git rev-parse --abbrev-ref HEAD); \
            done"

[core]
        autocrlf = input
        editor = vim
[http]
        sslVerify = false
[push]
        default = matching

[commit]
        template = ~/projects/gitconfig/files/git_commit_template.txt

[rebase]
        autosquash = true
